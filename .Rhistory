1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
.Dim=c(75,4)),
Y1999_2001=c(77,6,38,248,8,113,130,307,182,178,41,45,57,128,29,200,141,84,84,386,134,100,79,126,54,170,72,138,23,17,33,98,45,17,113,186,138,14,188,454,117,277,42,29,130,174,46,91,70,137,71,165,111,213,177,36,92,72,44,46,531,163,99,33,75,32,98,61,42,70,193,343,111,1390,78),
E1999_2001=c(103.57755,17.70690,76.21132,356.81312,26.97449,81.53906,140.78219,211.65457,148.20297,175.96095,48.80031,31.09341,40.69678,98.64155,54.88916,164.04069,105.11095,71.07385,139.88677,290.74242,116.53873,82.82622,66.98850,134.18967,54.92274,139.84200,71.54395,99.68248,35.80555,17.80764,37.84263,73.45790,42.25257,18.77021,95.40685,196.14144,120.06444,14.97588,187.08652,369.04677,122.72831,272.93478,27.70201,31.38442,134.53664,147.82242,45.43130,68.04062,67.10043,125.70558,73.74891,145.97562,101.08157,206.71858,150.68776,36.57785,80.00565,59.00809,48.03921,37.55162,536.56840,110.78567,87.20258,37.50685,53.84824,42.45403,132.26452,54.50861,53.84824,85.84826,201.87212,404.63966,156.40724,1743.69340,96.17915),
MHDI1999_2001=c(0.4923333,0.4174000,0.4303125,0.4491111,0.4773333,0.4540625,0.4705000,0.4571250,0.4521818,0.4898571,0.4735000,0.4610000,0.5200000,0.5405000,0.5412500,0.5503636,0.4702143,0.4580000,0.4647143,0.5099048,0.5202500,0.5256364,0.5031333,0.6155455,0.6034444,0.5588000,0.5459091,0.4754375,0.6010000,0.4682500,0.5546667,0.5788750,0.5935000,0.6191667,0.5194211,0.5961111,0.6137500,0.6312000,0.5736500,0.5866875,0.6068333,0.5292917,0.5820000,0.5962000,0.5208889,0.5810000,0.5390588,0.5905000,0.5732500,0.5817059,0.6228750,0.5816250,0.5870909,0.5978750,0.5447500,0.6296667,0.6042222,0.5127273,0.6108182,0.6376667,0.5600769,0.5220588,0.6113571,0.6053750,0.5630000,0.6060000,0.5460000,0.6058000,0.5950000,0.5673810,0.6220000,0.6042000,0.5515714,0.5882143,0.6003333),
MomEduc1999_2001=c(0.05187,0.01707,0.03334,0.10145,0.02739,0.02924,0.08602,0.05695,0.03142,0.05528,0.02959,0.03384,0.02668,0.09316,0.03732,0.06045,0.04014,0.03937,0.05313,0.06756,0.07050,0.04041,0.04545,0.06865,0.05706,0.08860,0.06273,0.04087,0.06721,0.04148,0.04348,0.09874,0.04212,0.04890,0.04540,0.07704,0.06945,0.04559,0.06168,0.06636,0.04286,0.05786,0.04929,0.07596,0.05599,0.06860,0.04016,0.05182,0.04921,0.04915,0.09167,0.07790,0.04883,0.06335,0.07331,0.02020,0.08072,0.06222,0.05475,0.05782,0.06673,0.08790,0.05737,0.05730,0.06132,0.10308,0.06499,0.05298,0.06111,0.06010,0.08827,0.07172,0.09203,0.09969,0.04178),
LowWeight1999_2001=c(0.08785,0.06764,0.06330,0.08761,0.05187,0.08195,0.08785,0.08281,0.08043,0.09026,0.07775,0.06371,0.08966,0.08397,0.06464,0.08618,0.09775,0.07874,0.08081,0.07757,0.08279,0.10419,0.07151,0.07065,0.09109,0.07836,0.08792,0.08185,0.07877,0.08108,0.06773,0.09538,0.08185,0.09183,0.09092,0.08999,0.07859,0.07399,0.08053,0.08353,0.07706,0.07976,0.07636,0.07668,0.08794,0.09548,0.09313,0.07978,0.07840,0.08361,0.08362,0.08841,0.08515,0.08452,0.08416,0.08078,0.08310,0.07094,0.08364,0.08793,0.10213,0.09689,0.08677,0.06864,0.10310,0.07013,0.08996,0.07947,0.07836,0.09113,0.08511,0.09875,0.07600,0.10349,0.10427),
Anomaly1999_2001=c(0.0041063,0.0000000,0.0011749,0.0023526,0.0024896,0.0020590,0.0039752,0.0038075,0.0012084,0.0031805,0.0025229,0.0017999,0.0030253,0.0052196,0.0036705,0.0040257,0.0022362,0.0036220,0.0012802,0.0036187,0.0038417,0.0037838,0.0016708,0.0025857,0.0055023,0.0027213,0.0056320,0.0014597,0.0046890,0.0050283,0.0017746,0.0021332,0.0026490,0.0017889,0.0023463,0.0027962,0.0021441,0.0014948,0.0022136,0.0027296,0.0040128,0.0029116,0.0040404,0.0024964,0.0042429,0.0050731,0.0046810,0.0024675,0.0038365,0.0032054,0.0100167,0.0044472,0.0027682,0.0034653,0.0015598,0.0021420,0.0039172,0.0032246,0.0039609,0.0026826,0.0031916,0.0055567,0.0032088,0.0017905,0.0051964,0.0021091,0.0029618,0.0053388,0.0006236,0.0043025,0.0038257,0.0030427,0.0017890,0.0030362,0.0029093),
Prenatal1999_2001=c(0.30387,0.21365,0.28169,0.66872,0.14938,0.18655,0.55223,0.44072,0.35216,0.44615,0.22133,0.24802,0.45737,0.50675,0.39294,0.56380,0.35790,0.52756,0.27332,0.49376,0.53861,0.43608,0.37026,0.44357,0.60118,0.41404,0.60576,0.33696,0.70710,0.40541,0.55368,0.49535,0.47258,0.56351,0.40568,0.51626,0.38165,0.44021,0.30009,0.40264,0.37145,0.48140,0.42222,0.45720,0.38769,0.49784,0.36980,0.61211,0.56130,0.42605,0.63834,0.57913,0.42631,0.44225,0.40466,0.20900,0.64913,0.47288,0.46785,0.61669,0.54110,0.65124,0.42690,0.56610,0.55768,0.36778,0.38047,0.52177,0.34629,0.44446,0.71108,0.45749,0.30857,0.48404,0.42325),
Y2009_2011=c(58,20,70,228,19,89,70,130,116,147,23,24,27,63,37,102,58,63,79,126,70,60,62,66,24,104,48,81,18,11,19,48,30,6,60,100,57,9,109,199,73,152,15,27,58,87,32,26,26,71,58,89,78,88,98,28,41,39,32,25,283,76,46,24,31,30,97,29,32,50,121,170,85,721,47),
E2009_2011=c(55.218938,14.338907,47.558120,225.871290,13.959216,47.803802,75.148976,120.510846,91.579905,94.461087,30.576268,19.006869,22.565539,59.254082,33.226658,84.842256,58.695713,43.381522,80.807112,156.745250,62.246938,51.719828,41.721306,74.285366,28.648035,78.521523,37.358586,50.573311,22.744217,9.000903,18.046475,40.961925,21.724263,9.693280,54.444667,112.448003,64.145391,7.899055,104.124587,218.158357,69.877976,146.419152,15.358861,16.483043,73.741887,80.702883,28.774598,38.654001,37.105459,68.701680,46.746624,81.499489,68.657010,109.202020,87.246964,21.136115,41.237387,32.854412,24.992581,22.543204,316.639699,57.653425,50.603090,25.796632,24.702229,22.401751,68.813353,28.320458,27.866318,46.031912,133.308656,206.827196,95.414036,955.219876,59.447650),
MHDI2009_2011=c(0.6250000,0.5682000,0.6032500,0.6047778,0.6153333,0.5986875,0.6035000,0.6188750,0.6050909,0.6265000,0.6071667,0.6076667,0.6433333,0.6405000,0.6707500,0.6745455,0.6077857,0.6303000,0.6355000,0.6321905,0.6410000,0.6359091,0.6262667,0.7115455,0.7072222,0.6675000,0.6682727,0.6163125,0.6980000,0.6337500,0.6666667,0.6938750,0.6945000,0.7093333,0.6458421,0.7066111,0.7062500,0.7118000,0.6898000,0.6952500,0.7130000,0.6439167,0.6910000,0.6970000,0.6434444,0.6942500,0.6668824,0.7027500,0.6786667,0.6954118,0.7228750,0.6850000,0.6913636,0.7033750,0.6647500,0.7376667,0.7086667,0.6669091,0.7133636,0.7381667,0.6871538,0.6589412,0.7097143,0.7040000,0.6782500,0.7023750,0.6703000,0.7006000,0.7086667,0.6673333,0.7171111,0.7014000,0.6807143,0.7025714,0.7313333),
MomEduc2009_2011=c(0.15909,0.07061,0.11616,0.21639,0.12320,0.09266,0.17595,0.15593,0.13568,0.15676,0.10494,0.08578,0.11580,0.16020,0.11002,0.20209,0.10832,0.15033,0.13249,0.15251,0.17462,0.10609,0.10956,0.16346,0.16736,0.14146,0.17856,0.09789,0.12635,0.11249,0.12129,0.28262,0.13194,0.12519,0.11555,0.18340,0.21031,0.12158,0.11562,0.19312,0.14159,0.16184,0.15124,0.12014,0.11772,0.17020,0.09935,0.14811,0.13884,0.16656,0.18427,0.23066,0.11473,0.18128,0.13354,0.12540,0.16880,0.14185,0.15579,0.18626,0.16162,0.16826,0.14624,0.12063,0.12719,0.16650,0.14714,0.16246,0.16164,0.12017,0.23796,0.17134,0.26280,0.23048,0.08917),
LowWeight2009_2011=c(0.10098,0.09086,0.09158,0.10198,0.09867,0.08644,0.10006,0.09026,0.08739,0.09521,0.07499,0.08421,0.08710,0.09486,0.07842,0.08178,0.09006,0.08135,0.08734,0.08345,0.08516,0.10091,0.09011,0.07507,0.09018,0.09083,0.08589,0.08509,0.09067,0.08437,0.08251,0.09451,0.08842,0.09908,0.08669,0.09567,0.09680,0.09802,0.09588,0.09282,0.08832,0.09142,0.08483,0.06549,0.09056,0.09077,0.09030,0.09129,0.09551,0.09319,0.08632,0.09327,0.08729,0.09265,0.09352,0.10708,0.08196,0.08384,0.09205,0.09676,0.10486,0.11260,0.09534,0.08773,0.09735,0.08308,0.09575,0.07913,0.09084,0.10222,0.09505,0.10331,0.08887,0.10684,0.10808),
Anomaly2009_2011=c(0.0082243,0.0067497,0.0039136,0.0058011,0.0048000,0.0124591,0.0088171,0.0076605,0.0052841,0.0105612,0.0070611,0.0043087,0.0056087,0.0067848,0.0051535,0.0057038,0.0054541,0.0068646,0.0045145,0.0094994,0.0077742,0.0076292,0.0073162,0.0088194,0.0111746,0.0088177,0.0101634,0.0080966,0.0058920,0.0066170,0.0053630,0.0032715,0.0047978,0.0053763,0.0061534,0.0046345,0.0107939,0.0037700,0.0044330,0.0074054,0.0082037,0.0060507,0.0072710,0.0049684,0.0077739,0.0069188,0.0062096,0.0055855,0.0056180,0.0069354,0.0097149,0.0092263,0.0084580,0.0070221,0.0057172,0.0035224,0.0059578,0.0101971,0.0107239,0.0082563,0.0055724,0.0076188,0.0085332,0.0057720,0.0048222,0.0116318,0.0070323,0.0065720,0.0048090,0.0043668,0.0099966,0.0056153,0.0076467,0.0066950,0.0102693),
Prenatal2009_2011=c(0.58110,0.41693,0.64418,0.78266,0.50240,0.52001,0.77442,0.67560,0.58670,0.59970,0.54760,0.55542,0.67667,0.67659,0.56756,0.71938,0.66540,0.62760,0.66823,0.60331,0.66966,0.65697,0.62402,0.62528,0.77313,0.68569,0.72100,0.65479,0.80098,0.61125,0.69018,0.63341,0.70870,0.77419,0.55832,0.71756,0.73062,0.63619,0.56285,0.67287,0.68219,0.63111,0.72904,0.49322,0.63614,0.69077,0.63208,0.84553,0.78311,0.65637,0.70760,0.76386,0.68716,0.73807,0.75134,0.66080,0.68731,0.61523,0.72982,0.72127,0.75512,0.57929,0.72208,0.70159,0.69982,0.74244,0.52331,0.62224,0.60326,0.68737,0.68351,0.73010,0.64404,0.71311,0.70006),
num = c(6,5,5,4,5,4,3,7,3,7,5,6,3,4,4,4,8,6,4,8,6,4,7,3,6,9,5,7,2,3,2,4,5,2,7,8,3,5,9,5,8,5,4,2,6,2,9,3,9,6,6,7,5,6,6,5,2,7,5,3,9,5,5,4,4,5,6,4,4,6,5,6,3,9,2),
adj = c(
2,3,5,12,17,18,
1,4,5,6,17,
1,5,7,12,19,
2,6,17,31,
1,2,3,6,7,
2,4,5,7,
3,5,6,
9,12,15,19,21,30,58,
8,15,19,
11,18,27,28,39,58,74,
10,17,18,20,28,
1,3,8,18,19,58,
14,17,20,
13,20,23,42,
8,9,21,36,
22,26,45,68,
1,2,4,11,13,18,20,31,
1,10,11,12,17,58,
3,8,9,12,
11,13,14,17,23,28,67,73,
8,15,27,30,36,58,
16,26,42,45,
14,20,32,35,42,67,73,
57,64,71,
36,41,49,51,63,66,
16,22,33,45,47,62,65,68,70,
10,21,36,39,58,
10,11,20,39,55,67,74,
41,48,
8,21,58,
4,17,
23,35,55,67,
26,44,65,68,70,
40,54,
23,32,42,45,47,55,56,
15,21,25,27,37,39,51,66,
36,51,71,
40,43,52,54,72,
10,27,28,36,53,60,61,66,74,
34,38,46,52,54,
25,29,48,49,51,54,64,72,
14,22,23,35,45,
38,52,59,72,
33,68,
16,22,26,35,42,47,
40,52,
26,35,45,49,50,56,61,62,74,
29,41,54,
25,41,47,50,59,61,63,69,72,
47,49,52,59,62,70,
25,36,37,41,64,71,
38,40,43,46,50,59,70,
39,61,63,66,69,
34,38,40,41,48,72,
28,32,35,56,67,74,
35,47,55,61,74,
24,71,
8,10,12,18,21,27,30,
43,49,50,52,72,
39,61,74,
39,47,49,53,56,60,69,74,75,
26,47,50,65,70,
25,49,53,66,69,
24,41,51,71,
26,33,62,70,
25,36,39,53,63,
20,23,28,32,55,73,
16,26,33,44,
49,53,61,63,
26,33,50,52,62,65,
24,37,51,57,64,
38,41,43,49,54,59,
20,23,67,
10,28,39,47,55,56,61,60,75,
61,74),
sumNumNeigh = 386
)
attach(data)
if(!require(dplyr)){ install.packages("dplyr"); require(dplyr)}
if(!require(tidyverse)){ install.packages("tidyverse"); require(tidyverse)}
if(!require(readxl)){ install.packages("readxl"); require(readxl)}
if(!require(stringr)){ install.packages("stringr"); require(stringr)}
if(!require(geobr)){ install.packages("geobr"); require(geobr)}
if(!require(RColorBrewer)){ install.packages("RColorBrewer"); require(RColorBrewer)}
if(!require(ggplot2)){ install.packages("ggplot2"); require(ggplot2)}
if(!require(fda)){ install.packages("fda"); require(fda)}
if(!require(dplyr)){ install.packages("dplyr"); require(dplyr)}
if(!require(maps)){ install.packages("maps"); require(maps)}   # For adding a map to the plots of Brazil
if(!require(NbClust)){ install.packages("NbClust"); require(NbClust)}
if(!require(ppclust)){ install.packages("ppclust"); require(ppclust)}
if(!require(psych)){ install.packages("psych"); require(psych)}
if(!require(nimble)){ install.packages("nimble"); require(nimble)} # For MCMC computation using NIMBLE.
if(!require(spdep)){ install.packages("spdep"); require(spdep)}   # For computing the neighbourhood and adjancency objects.
if(!require(coda)){ install.packages("coda"); require(coda)}
if(!require(viridis)){ install.packages("viridis"); require(viridis)}  # Colour pallette for plots.
if(!require(ggplot2)){ install.packages("ggplot2"); require(ggplot2)}
#plotar mapa
#juntar com a microrgião do IA, ordenar e dar seguimento
#DTB = read_xls("C:/Users/vlara/OneDrive/Estatistica UFMG/Mestrado/Pesquisa/PesquisaMestrado/RELATORIO_DTB_BRASIL_MUNICIPIO.xls")
#DTB =DTB%>%
#  mutate(COD_Municipio_Reduzido = as.character(COD_Municipio_Reduzido))
#DTB%>%filter(COD_UF =="31")%>%
#  count(COD_Microrregiao_Geografica)
# Ler os dados de códigos de município
cod_micro <- read.table("C:/Users/vlara/OneDrive/Estatistica UFMG/Mestrado/Pesquisa/PesquisaMestrado/DATASUS/dados_codMICRO.txt", header = TRUE)
# Renomear a coluna de município e converter para tipo caracter
cod_micro <- cod_micro %>%
rename(COD_Municipio_Reduzido = COD_MUN) %>%
mutate(COD_Municipio_Reduzido = as.character(COD_Municipio_Reduzido))
# Importar dados de nascimentos vivos
total = read.table("C:/Users/vlara/OneDrive/Estatistica UFMG/Mestrado/Pesquisa/PesquisaMestrado/DATASUS/nascidos_vivos_total.csv", sep = ";", header = TRUE)
# Remover linhas e colunas desnecessárias, renomear e transformar dados
total = total[-5596, -25] %>%
rename(COD_Municipio_Reduzido = Municipio) %>%
pivot_longer(cols = 2:24, names_to = "Ano", values_to = "Nascidos_vivos") %>%
mutate(Ano = str_sub(Ano, 2),  # Remover o primeiro caractere do ano
Nascidos_vivos = as.integer(Nascidos_vivos),
COD_Municipio_Reduzido = as.character(COD_Municipio_Reduzido))
# COVARIÁVEL: PROPORÇÃO DE PRÉ-NATAL INADEQUADO (MENOS DE 5 CONSULTAS)
consultas_ignoradas = read.table("C:/Users/vlara/OneDrive/Estatistica UFMG/Mestrado/Pesquisa/PesquisaMestrado/DATASUS/ignorados_consultas.csv", sep = ";", header = TRUE)
# Processar dados de consultas ignoradas
consultas_ignoradas = suppressWarnings({
consultas_ignoradas[1:5596, -25] %>%
rename(COD_Municipio_Reduzido = Municipio) %>%
mutate_if(is.character, as.integer) %>%
mutate(COD_Municipio_Reduzido = as.character(COD_Municipio_Reduzido)) %>%
pivot_longer(cols = 2:24, names_to = "Ano", values_to = "Ignorados") %>%
mutate(Ignorados = ifelse(is.na(Ignorados), 0, Ignorados)) %>%
filter(COD_Municipio_Reduzido != "NA") %>%
mutate(Ano = str_sub(Ano, 2)) %>%
inner_join(total) %>%
mutate(Nascidos_vivos_corrigido = as.integer(Nascidos_vivos) - Ignorados)
})
# Importar dados de consultas realizadas
consultas = read.table("C:/Users/vlara/OneDrive/Estatistica UFMG/Mestrado/Pesquisa/PesquisaMestrado/DATASUS/nascidos_vivos_consultas.csv", sep = ";", header = TRUE)
# Processar dados de consultas
m_consultas = suppressWarnings({
consultas[, -25] %>%
rename(COD_Municipio_Reduzido = Municipio) %>%
mutate_if(is.character, as.integer) %>%
mutate(COD_Municipio_Reduzido = as.character(COD_Municipio_Reduzido)) %>%
pivot_longer(cols = 2:24, names_to = "Ano", values_to = "Nascidos_vivos_com_ate_6_consultas") %>%
mutate(Nascidos_vivos_com_ate_6_consultas = ifelse(is.na(Nascidos_vivos_com_ate_6_consultas), 0, Nascidos_vivos_com_ate_6_consultas)) %>%
filter(COD_Municipio_Reduzido != "NA") %>%
mutate(Ano = str_sub(Ano, 2)) %>%
inner_join(consultas_ignoradas) %>%
mutate(taxa_consultas = Nascidos_vivos_com_ate_6_consultas / Nascidos_vivos_corrigido) %>%
inner_join(cod_micro) %>%
group_by(MICRO_, Ano) %>%
mutate(Sum_Nascidos_vivos_com_ate_6_consultas = sum(Nascidos_vivos_com_ate_6_consultas),
SumNascidos_vivos = sum(Nascidos_vivos_corrigido)) %>%
mutate(taxa_consultas_microrregião = Sum_Nascidos_vivos_com_ate_6_consultas / SumNascidos_vivos) %>%
arrange(COD_MICRO_VAR) %>%
ungroup()
})
# COVARIÁVEL: PROPORÇÃO DE MÃES COM ENSINO SUPERIOR
instrucao_ignoradas = read.table("C:/Users/vlara/OneDrive/Estatistica UFMG/Mestrado/Pesquisa/PesquisaMestrado/DATASUS/ignorados_instrucao.csv", sep = ";", header = TRUE)
# Processar dados de instrução ignorada
instrucao_ignoradas = suppressWarnings({
instrucao_ignoradas[, -25] %>%
rename(COD_Municipio_Reduzido = Municipio) %>%
mutate_if(is.character, as.integer) %>%
mutate(COD_Municipio_Reduzido = as.character(COD_Municipio_Reduzido)) %>%
pivot_longer(cols = 2:24, names_to = "Ano", values_to = "Ignorados") %>%
mutate(Ignorados = ifelse(is.na(Ignorados), 0, Ignorados)) %>%
filter(COD_Municipio_Reduzido != "NA") %>%
mutate(Ano = str_sub(Ano, 2)) %>%
inner_join(total) %>%
mutate(Nascidos_vivos_corrigido = as.integer(Nascidos_vivos) - Ignorados)
})
# Importar dados de instrução
instrucao = read.table("C:/Users/vlara/OneDrive/Estatistica UFMG/Mestrado/Pesquisa/PesquisaMestrado/DATASUS/nascidos_vivos_instrução2.csv", sep = ";", header = TRUE)
# Processar dados de instrução
m_instrucao = suppressWarnings({
instrucao[, -25] %>%
rename(COD_Municipio_Reduzido = Municipio) %>%
mutate_if(is.character, as.integer) %>%
mutate(COD_Municipio_Reduzido = as.character(COD_Municipio_Reduzido)) %>%
pivot_longer(cols = 2:24, names_to = "Ano", values_to = "Nascidos_vivos_com_grau_instrucao_mae") %>%
mutate(Nascidos_vivos_com_grau_instrucao_mae = ifelse(is.na(Nascidos_vivos_com_grau_instrucao_mae), 0, Nascidos_vivos_com_grau_instrucao_mae)) %>%
filter(COD_Municipio_Reduzido != "NA") %>%
mutate(Ano = str_sub(Ano, 2)) %>%
inner_join(instrucao_ignoradas) %>%
mutate(taxa_grau0 = Nascidos_vivos_com_grau_instrucao_mae / Nascidos_vivos_corrigido) %>%
inner_join(cod_micro) %>%
group_by(MICRO_, Ano) %>%
mutate(Sum_Nascidos_vivos_com_grau_instrucao_mae = sum(Nascidos_vivos_com_grau_instrucao_mae),
SumNascidos_vivos = sum(Nascidos_vivos_corrigido)) %>%
mutate(taxa_instrucao_microrregião = Sum_Nascidos_vivos_com_grau_instrucao_mae / SumNascidos_vivos) %>%
arrange(COD_MICRO_VAR) %>%
ungroup()
})
# COVARIÁVEL: PROPORÇÃO DE NASCIDOS VIVOS COM PESO ATÉ 2500g
subnutridos_ignoradas = read.table("C:/Users/vlara/OneDrive/Estatistica UFMG/Mestrado/Pesquisa/PesquisaMestrado/DATASUS/ignorados_peso.csv", sep = ";", header = TRUE)
# Processar dados de peso ignorados
subnutridos_ignoradas = suppressWarnings({
subnutridos_ignoradas[, -25] %>%
rename(COD_Municipio_Reduzido = Municipio) %>%
mutate_if(is.character, as.integer) %>%
mutate(COD_Municipio_Reduzido = as.character(COD_Municipio_Reduzido)) %>%
pivot_longer(cols = 2:24, names_to = "Ano", values_to = "Ignorados") %>%
mutate(Ignorados = ifelse(is.na(Ignorados), 0, Ignorados)) %>%
filter(COD_Municipio_Reduzido != "NA") %>%
mutate(Ano = str_sub(Ano, 2)) %>%
inner_join(total) %>%
mutate(Nascidos_vivos_corrigido = as.integer(Nascidos_vivos) - Ignorados)
})
# Importar dados de nascidos vivos com peso até 2500g
subnutridos = read.table("C:/Users/vlara/OneDrive/Estatistica UFMG/Mestrado/Pesquisa/PesquisaMestrado/DATASUS/nascidos_vivos_menos_2500g.csv", sep = ";", header = TRUE)
# Processar dados de subnutridos
m_subnutridos = suppressWarnings({
subnutridos[, -25] %>%
rename(COD_Municipio_Reduzido = Municipio) %>%
mutate_if(is.character, as.integer) %>%
mutate(COD_Municipio_Reduzido = as.character(COD_Municipio_Reduzido)) %>%
pivot_longer(cols = 2:24, names_to = "Ano", values_to = "Nascidos_vivos_subnutridos") %>%
mutate(Nascidos_vivos_subnutridos = ifelse(is.na(Nascidos_vivos_subnutridos), 0, Nascidos_vivos_subnutridos)) %>%
filter(COD_Municipio_Reduzido != "NA") %>%
mutate(Ano = str_sub(Ano, 2)) %>%
inner_join(subnutridos_ignoradas) %>%
mutate(taxa_subnutrição = Nascidos_vivos_subnutridos / Nascidos_vivos_corrigido) %>%
inner_join(cod_micro) %>%
group_by(MICRO_, Ano) %>%
mutate(Sum_Nascidos_vivos_subnutridos = sum(Nascidos_vivos_subnutridos),
SumNascidos_vivos = sum(Nascidos_vivos_corrigido)) %>%
mutate(taxa_subnutrição_microrregiao = Sum_Nascidos_vivos_subnutridos / SumNascidos_vivos) %>%
arrange(COD_MICRO_VAR) %>%
ungroup()
})
# Agrupar dados de consultas por microrregião
grouped_consultas_MG = m_consultas %>%
distinct(MICRO_, Ano, .keep_all = TRUE) %>%
dplyr::select(MICRO_, Ano, taxa_consultas_microrregião) %>%
pivot_wider(names_from = Ano, values_from = taxa_consultas_microrregião)
# Agrupar dados de instrução por microrregião
grouped_instrucao_MG = m_instrucao %>%
distinct(MICRO_, Ano, .keep_all = TRUE) %>%
dplyr::select(MICRO_, Ano, taxa_instrucao_microrregião) %>%
pivot_wider(names_from = Ano, values_from = taxa_instrucao_microrregião)
# Agrupar dados de subnutridos por microrregião
grouped_subnutridos_MG = m_subnutridos %>%
distinct(MICRO_, Ano, .keep_all = TRUE) %>%
dplyr::select(MICRO_, Ano, taxa_subnutrição_microrregiao) %>%
pivot_wider(names_from = Ano, values_from = taxa_subnutrição_microrregiao)
# Criar um array para armazenar os dados
dim = c(75, 23, 3)  # Dimensões do array
x = array(data = NA, dim = dim, dimnames = list(grouped_consultas_MG$MICRO_, unique(m_subnutridos$Ano)))
# Preencher o array com dados de consultas, instrução e subnutrição
x[,,1] <- as.matrix(grouped_consultas_MG[, 2:24])  # Pré-natal inadequado
x[,,2] <- as.matrix(grouped_instrucao_MG[, 2:24])  # Baixa escolaridade
x[,,3] <- as.matrix(grouped_subnutridos_MG[, 2:24])  # Peso até suficiente
# Plotar os dados
plot(x[1,,1])  # Gráfico de pré-natal inadequado
plot(x[1,,2])  # Gráfico de baixa escolaridade
plot(x[1,,3])  # Gráfico de peso até suficiente
# Agrupar dados totais de nascimentos
Grouped_total_MG <- total %>%
inner_join(cod_micro) %>%
filter(COD_Municipio_Reduzido != "NA") %>%
arrange(COD_MICRO_VAR) %>%
group_by(MICRO_, Ano) %>%
mutate(SumNascidos = sum(Nascidos_vivos)) %>%
distinct(MICRO_, Ano, .keep_all = TRUE) %>%
dplyr::select(MICRO_, Ano, SumNascidos) %>%
pivot_wider(names_from = Ano, values_from = SumNascidos)
# Criar uma matriz a partir dos dados agrupados
E <- as.matrix(Grouped_total_MG[, 2:24])
row.names(E) <- Grouped_total_MG$MICRO_
# Definir variáveis únicas para área e tempo
area = unique(cod_micro$MICRO_)
tempo = unique(total$Ano)
#padronizando as covariáveis
x[,,1] <-scale(x[,,1])
x[,,2] <-scale(x[,,2])
x[,,3] <-scale(x[,,3])
# Definindo o número de Klusters (K)
K = 4
# Estimando os coeficientes iniciais usando um modelo GLM (Modelo Linear Generalizado)
# O modelo utiliza a variável resposta Y2009_2011 e preditores selecionados da matriz x.
n_regions = dim(E)[1]  # Número de regiões
n_times = dim(E)[2]     # Número de períodos de tempo
# Ajustar o modelo GLM com a função de distribuição Poisson e link log
glm <- glm(Y2009_2011 ~ 1 + x[, 10, 1] + x[, 10, 2] + x[, 10, 3], family = poisson(link = "log"))
# Exibir o resumo do modelo ajustado
summary(glm)
# Extraindo o coeficiente intercepto (lambda0) do modelo
lambda0 = glm$coefficients[1]
print(lambda0)
log(lambda0)
# Extraindo os coeficientes beta iniciais (para as variáveis preditoras)
beta_ini = glm$coefficients[2:4]
print(beta_ini)
# Definindo valores iniciais para os parâmetros a e b
a0 = 1  # Parâmetro a inicial
b0 = 1  # Parâmetro b inicial
# Definindo valores iniciais para os parâmetros gamma
gamma_ini = c(0.05, 0.10, 0.10, 0.15)
# Inicializando os parâmetros a e b para uma distribuição uniforme
a_unif_ini = c(0.00, rep(0, K - 1))  # Parâmetros a uniformes
b_unif_ini = c(0.1, rep(1, K - 1))   # Parâmetros b uniformes
# Estimando epsilon com base em um fator hAI e os parâmetros gamma
epsilon_ini = 1 - hAI %*% gamma_ini
# Expandindo epsilon para uma matriz com 75 regiões e 23 períodos
epsilon_ini = matrix(rep(epsilon_ini, 23), nrow = 75, ncol = 23)
# Estimando lambda inicial utilizando a distribuição gamma
lambda_ini = matrix(rgamma(1725, shape = a0, rate = b0), ncol = 23, nrow = 75)
# Estimando Y com base nos parâmetros lambda, E e epsilon, aplicando a função exponencial nos coeficientes beta
mu_ini = lambda_ini * E * epsilon_ini * exp(beta_ini[1] * x[,, 1] + beta_ini[2] * x[,, 2] + beta_ini[3] * x[,, 3])
y_ini = matrix(rpois(1725,mu_ini),nrow = n_regions,ncol = n_times)
#estimando o theta com os betas iniciais e o x
theta_ini = exp(beta_ini[1] * x[,, 1] + beta_ini[2] * x[,, 2] + beta_ini[3] * x[,, 3])
# Definindo um parâmetro w para ser utilizado em cálculos posteriores
w=0.7
dynamic_sampler <- nimbleFunction(
contains = sampler_BASE,
setup = function(model, mvSaved, target, control) {
dims_Y <- dim(model$Y)   # Y é [n_regions, n_times]
n_regions <- dims_Y[1]
n_times   <- dims_Y[2]
dims_x <- dim(model$x)   # x é [n_regions, n_times, p]
p <- dims_x[3]
# --- hiperparâmetros vindos do control ---
w  <- control$w
a0 <- control$a0
b0 <- control$b0
# --- buffers para recursão ---
att_buf <- nimMatrix(nrow = n_regions, ncol = n_times, init = 0, type = 'double')
btt_buf <- nimMatrix(nrow = n_regions, ncol = n_times, init = 0, type = 'double')
at_buf  <- nimMatrix(nrow = n_regions, ncol = n_times+1, init = 0, type = 'double')
bt_buf  <- nimMatrix(nrow = n_regions, ncol = n_times+1, init = 0, type = 'double')
# --- dependências ---
calcNodes <<- model$getDependencies(target)
setupOutputs(
n_regions = n_regions,
n_times   = n_times,
p         = p,
w  = w, a0 = a0, b0 = b0,
att_buf = att_buf,
btt_buf = btt_buf,
at_buf  = at_buf,
bt_buf  = bt_buf
)
},
run = function() {
declare(i, integer())
declare(t, integer())
declare(tt, integer())
declare(k, integer())
declare(prod_val, double())
declare(tmp, double())
declare(shape_tmp, double())
declare(rate_tmp, double())
declare(E_it,double())
declare(count_it,double())
declare(epsilon_i,double())
for(i in 1:n_regions) {
at_buf[i,1] <<- a0
bt_buf[i,1] <<- b0
epsilon_i <- model$epsilon[i]
## --- forward recursion ---
for(t in 2:(n_times+1)) {
prod_val <- 0
for(k in 1:p) {
tmp <- model$x[i, t-1, k]
prod_val <- prod_val + tmp * model$beta[k]
}
count_it <- model$count[i,t-1]
E_it <- model$E[i,t-1]
att_buf[i, t-1] <<- w * at_buf[i, t-1]
btt_buf[i, t-1] <<- w * bt_buf[i, t-1] / (epsilon_i * E_it * exp(prod_val))
at_buf[i, t] <<- att_buf[i, t-1] + count_it
bt_buf[i, t] <<- w * bt_buf[i, t-1] + epsilon_i * E_it * exp(prod_val)
}
## --- amostragem lambda no último tempo ---
shape_tmp <- att_buf[i, n_times]
rate_tmp  <- btt_buf[i, n_times]
model$lambda[i, n_times] <<- rgamma(1, shape_tmp, rate_tmp)
## --- backward recursion ---
for(tt in n_times:2) {
shape_tmp <- (1 - w) * at_buf[i, tt-1]
rate_tmp  <- bt_buf[i, tt-1]
model$lambda[i, tt-1] <<- rgamma(1, shape_tmp, rate_tmp) + w * model$lambda[i, tt]
}
}
## atualizar likelihood
model$calculate(calcNodes)
copy(from = model, to = mvSaved, row = 1, nodes = calcNodes, logProb = TRUE)
},
methods = list(
reset = function() {}
)
)
code <- nimbleCode({
# Priors para coeficientes de regressão
for (j in 1:p) {
beta[j] ~ dnorm(mu_beta[j], sd = 5)
}
# Priors para parâmetros de subnotificação
gamma[1] ~ dunif(a_unif[1], b_unif[1])
for (j in 2:K) {
gamma[j] ~ dunif(
min = a_unif[j] * (1 - sum(gamma[1:(j - 1)])),
max = b_unif[j] * (1 - sum(gamma[1:(j - 1)]))
)
}
# Probabilidade de notificação
for (i in 1:n_regions) {
epsilon[i] <- 1 - sum(h[i, 1:K] * gamma[1:K])
}
# Estados latentes e observações
for (i in 1:n_regions) {
# Inicialização
log_theta[i, 1] <- log(lambda[i, 1]) + inprod(beta[1:p], x[i, 1, 1:p])
theta[i, 1] <- exp(log_theta[i, 1])
mu[i,1] <- E[i, 1] * epsilon[i] * theta[i, 1]
Y[i, 1] ~ dpois(mu[i,1])
at[i, 1] <- a0
bt[i, 1] <- b0
for (t in 2:(n_times+1)) {
att[i,t-1] <- w*at[i,t-1]
btt[i,t-1] <- w*bt[i,t-1]
at[i, t] <- att[i, t-1] + count[i, t-1]
bt[i, t] <- btt[i, t-1] + E[i, t-1] * epsilon[i] * exp(inprod(beta[1:p], x[i,t-1,1:p]))
}
for (t in 1:n_times) {
lambda[i, t] ~ dgamma(att[i, t], rate = btt[i, t])
}
for(t in 2:n_times){
log_theta[i, t] <- log(lambda[i, t]) + inprod(beta[1:p], x[i, t, 1:p])
theta[i, t] <- exp(log_theta[i, t])
mu[i,t] <- E[i, t] * epsilon[i] * theta[i, t]
Y[i, t] ~ dpois(mu[i,t])
}
}
})
# -------------------------------
# 2️⃣ Constantes e dados
# -------------------------------
n_clusters   <- 4
n_covariates <- as.integer(dim(x)[3])
n_regions    <- as.integer(dim(E)[1])
n_times      <- as.integer(dim(E)[2])
constants <- list(
mu_beta = beta_ini,
w       = 0.9,
a_unif  = a_unif_ini,
b_unif  = b_unif_ini,
n_regions = n_regions,
n_times   = n_times,
p         = n_covariates,
K         = n_clusters,
a0 = 1,
b0 = 1,
h         = hAI
);print(constants)
data <- list(
Y = round(y_ini),
E = E,
x = x,
count = round(y_ini)
);print(data)
# -------------------------------
# 3️⃣ Inicializações para 2 cadeias
# -------------------------------
inits1 <- list(
beta   = rnorm(constants$p, 0, 1),
gamma  = gamma_ini,
lambda = matrix(lambda0, n_regions, n_times)
);print(inits1)
inits2 <- list(
beta   = rnorm(constants$p, beta_ini, 1),
gamma  = gamma_ini / 2,
lambda = matrix(1, n_regions, n_times)
)
inits_list <- list(inits1, inits2)
# -------------------------------
# 5️⃣ Configurar MCMC
# -------------------------------
model <- nimbleModel(code, constants = constants, data = data, inits = inits1)
calcNodes <- model$expandNodeNames("lambda")
conf <- configureMCMC(model, monitors = c("beta", "gamma", "lambda", "theta"))
conf$removeSamplers("lambda")
conf$addSampler(target = "lambda", type = dynamic_sampler,
control = list(w = 0.9, a0 = 1, b0 = 1))
# -------------------------------
# 6️⃣ Compilar modelo e MCMC
# -------------------------------
Cmodel <- compileNimble(model)
Rmcmc  <- buildMCMC(conf)
Cmcmc  <- compileNimble(Rmcmc, project = Cmodel, showCompilerOutput = TRUE)
dyn <- dynamic_sampler(model, mvSaved, "lambda", control = list(w=0.9,a0=1,b0=1))
ls(dyn)
model$defaultModelValues
